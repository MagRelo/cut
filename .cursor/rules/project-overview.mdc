---
description: 
globs: 
alwaysApply: true
---

# Overview 
Bet the Cut is a web application that allows users to participate in fantasy golf competitions and also to place and track real-money bets. 

## High-Level Summary of Features
- User Mangement: all standard features regrading User management, including registraion, email login, account amangement, password reset, etc.

- Fantasy Management:
  - League Management: users can create new Leagues, join existing Leagues, etc. 
  - Team Management: Users can create Teams for each League. Each week the User can select 4 players to compete in that weeks' Tournament. 

- PGA Tour Data   
  - Pull and display data from the PGA Tour, including player data, tournament results, schedules, etc.

-Betting
  - Place Bets: all functionality needed to place, track, and settle bets using data from Teams, Leagues, or results from the actual live golf tournament itself. These bets are optionally sent to Hyperliquid as perpetual orders. 


## Project File Structure 
- /client: all client-side code and dependencies. install all front-end dependencies in this directory using this package.json
- /server: all server-side code and dependencies. install all server-side dependencies in this directory using this package.json


## Live Data Updates
Each active player's stableford scores need to be updated every 10 minutes. This is done via a cron job that runs every 10 minutes. The job needs to: determine all of the players that are currently active on User teams for the current tournament, pull each scorecard and calculate the players score, and then save the player in the db. 


## Placing orders on Hyperliquid 
One key aspect of this server is it's ability to place orders on Hyperliquid. We will use this package (https://github.com/nktkas/hyperliquid) to initialize and connect to Hyperliquid API (https://hyperliquid.gitbook.io/hyperliquid-docs). The main use for Hyperliquid is placing orders on perpetual assets (https://hyperliquid.gitbook.io/hyperliquid-docs/hyperliquid-l1/clearinghouse) so make sure the implementation allows for a simple set of functions to place, monitor, and withdraw these types of orders.


