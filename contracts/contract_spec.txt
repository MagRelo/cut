Contracts 

Purpose: This system will provide accounting for a fantasy sports platform. Users can 
  create new contests, enter contests. Contest contracts will hold the funds for the contest 
  while the contest is in progress. The Oracle will close contests to new entry and 
  set the split for the contest contracts. Funds are deposited into Aave to earn yield during the contest period.

Actors:
- Oracle: this actor is responsible for closing contests to new entry, and setting the results of the contests
  - Must be whitelisted by platform admin
  - Can be revoked if malicious behavior is detected
  - Receives all yield from contests
- Contest Owner: this actor is the creator of the contest contract
  - Can cancel and refund participants when contest is in OPEN state
  - Has full control over contest cancellation
- Participant: this actor enters contests
  - Must have sufficient funds in the payment token
  - Can leave contests before they are closed
  - Can emergency withdraw after contest end time

Contracts: 
- Contest Factory
  - createContest(
    string name,
    uint256 entryFee,
    uint256 maxParticipants,
    uint256 endTime,
    address oracle
  ) returns (address)
  - addOracle(address oracle) (Owner only)
  - removeOracle(address oracle) (Owner only)
  - getContests() returns (Contest[])
  - Constructor requires: paymentToken, aavePoolAddressesProvider

- Contest (Ownable)
  - enter() - Requires approval of entryFee tokens
  - leave() - Withdraws initial deposit only (no yield)
  - emergencyWithdraw() - Available after contest end time
  - closeEntry() (Oracle only)
  - distribute(uint256[] payouts) (Oracle only) - Takes basis points array
  - cancelAndRefund() (Owner only) - Cancels contest and refunds all participants
  - Constructor requires: name, entryFee, maxParticipants, endTime, paymentToken, oracle, aavePoolAddressesProvider
  - Owner is set to msg.sender in constructor (contest creator)

- Payment Token (ERC20 - USDC simulation)
  - name() returns (string) - "USD Coin(x)"
  - symbol() returns (string) - "USDC(x)"
  - decimals() returns (uint8) - 6 (USDC standard)
  - totalSupply() returns (uint256)
  - balanceOf(address account) returns (uint256)
  - transfer(address to, uint256 amount) returns (bool)
  - transferFrom(address from, address to, uint256 amount) returns (bool)
  - approve(address spender, uint256 amount) returns (bool)
  - allowance(address owner, address spender) returns (uint256)
  - mint(address to, uint256 amount) (Owner only)
  - burn(address from, uint256 amount) (Owner only)

Token Distribution Rules:
- Minting:
  - Platform can mint tokens for ecosystem growth
- Burning:
  - Platform can burn tokens for deflationary pressure
- Note: This is a USDC simulation for development. Production should use actual USDC.

Aave Integration:
- All contest funds are automatically deposited into Aave to earn yield
- Yield is tracked separately from initial deposits
- Payouts are calculated from initial deposits only
- All yield is sent to oracle

States:
- OPEN: Contest is accepting entries
- CLOSED: Contest is no longer accepting entries
- SETTLED: Contest has been settled and funds distributed
- CANCELLED: Contest was cancelled (e.g., due to insufficient participants)

Events:
- ContestCreated(address indexed contest, address indexed host, uint256 entryFee)
- ContestEntered(address indexed participant)
- ContestLeft(address indexed participant)
- EntryClosed()
- PayoutsDistributed(uint256[] payouts)
- ContestCancelled()
- ParticipantRefunded(address indexed participant, uint256 amount)
- OracleAdded(address indexed oracle)
- OracleRemoved(address indexed oracle)

Financial Considerations:
- Minimum contest size: 2 participants
- Maximum contest size: Configurable per contest
- Entry fees: Must be in payment token (USDC simulation)
- Emergency withdrawal: Available after contest end time
- Yield distribution: Oracle receives all yield
- Participant payouts: Based on initial deposits only

Security Considerations:
- Reentrancy protection (using OpenZeppelin's ReentrancyGuard)
- Access control for all privileged functions (using OpenZeppelin's Ownable)
- Oracle whitelist system
- Funds safety checks
- Token minting/burning restrictions (Owner only)
- Aave integration for yield generation
- External calls made last in distribute function

Constants to Set/Decide:
- Payment Token Name: "USD Coin(x)" (simulation)
- Payment Token Symbol: "USDC(x)" (simulation)
- Payment Token Decimals: 6 (USDC standard)
- Contest Max Participants: Configurable per contest
- Contest End Time: Must be in future
- Aave Pool Addresses Provider: Required for yield generation

Key Differences from Original Spec:
- Uses Aave integration for yield generation
- Payment token is USDC simulation (6 decimals) not custom platform token
- All yield goes to oracle
- Participants can leave contests before closing
- Emergency withdrawal available after end time
- Payouts calculated from initial deposits only, not total pot
- Oracle receives all yield after payouts

