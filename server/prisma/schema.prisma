generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String?            @unique
  phone             String?            @unique
  password          String?
  name              String
  userType          String             @default("USER")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ownedLeagues      League[]           @relation("LeagueCommissioner")
  leagueMemberships LeagueMembership[]
  teams             Team?
  orderLogs         UserOrderLog[]
  verificationCode  String?
  verificationCodeExpiresAt DateTime?
  isVerified        Boolean            @default(false)
  lastLoginAt       DateTime?
  loginAttempts     Int                @default(0)
  lockedUntil       DateTime?

  @@index([email])
  @@index([phone])
  @@index([verificationCode])
}

model League {
  id              String             @id @default(cuid())
  name            String
  description     String?
  isPrivate       Boolean            @default(false)
  inviteCode      String?            @unique
  maxTeams        Int                @default(8)
  commissionerId  String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  commissioner    User               @relation("LeagueCommissioner", fields: [commissionerId], references: [id])
  members         LeagueMembership[]
  settings        LeagueSettings?
  leagueTeams     LeagueTeam[]
  timelineEntries TimelineEntry[]
}

model LeagueSettings {
  id             String    @id @default(cuid())
  leagueId       String    @unique
  rosterSize     Int       @default(8)
  weeklyStarters Int       @default(4)
  scoringType    String    @default("STABLEFORD")
  draftDate      DateTime?
  seasonStart    DateTime?
  seasonEnd      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  league         League    @relation(fields: [leagueId], references: [id])
}

model LeagueMembership {
  id       String   @id @default(cuid())
  userId   String
  leagueId String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  league   League   @relation(fields: [leagueId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, leagueId])
}

model Team {
  id              String          @id @default(cuid())
  name            String
  color           String          @default("#059669")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String          @unique
  leagueTeams     LeagueTeam[]
  owner           User            @relation(fields: [userId], references: [id])
  TeamPlayer      TeamPlayer[]
  timelineEntries TimelineEntry[]
}

model LeagueTeam {
  id        String   @id @default(cuid())
  leagueId  String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  league    League   @relation(fields: [leagueId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([leagueId, teamId])
  @@index([leagueId])
  @@index([teamId])
}

model Player {
  id                String             @id @default(cuid())
  pga_pgaTourId     String?            @unique
  pga_imageUrl      String?
  pga_displayName   String?
  pga_firstName     String?
  pga_lastName      String?
  pga_shortName     String?
  pga_country       String?
  pga_countryFlag   String?
  pga_age           Int?
  pga_owgr          String?
  pga_fedex         String?
  pga_performance   Json?
  isActive          Boolean            @default(false)
  inField           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastSyncedAt      DateTime?
  TeamPlayer        TeamPlayer[]
  tournamentPlayers TournamentPlayer[]

  @@index([pga_pgaTourId])
  @@index([isActive])
  @@index([inField])
}

model Tournament {
  id                 String             @id @default(cuid())
  pgaTourId          String
  name               String
  startDate          DateTime
  endDate            DateTime
  course             String
  city               String
  state              String
  timezone           String
  venue              Json?
  purse              Float?
  status             String
  roundStatusDisplay String?
  roundDisplay       String?
  currentRound       Int?
  weather            Json?
  beautyImage        String?
  cutLine            String?
  cutRound           String?
  manualActive       Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  timelineEntries    TimelineEntry[]
  tournamentPlayers  TournamentPlayer[]
}

model SystemProcessRecord {
  id          String   @id @default(cuid())
  processType String
  status      String
  processData Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([processType])
  @@index([status])
  @@index([createdAt])
}

model UserOrderLog {
  id                 String   @id @default(cuid())
  userId             String
  orderType          String
  asset              String
  amount             Float
  price              Float
  status             String
  orderAttemptLog    Json?
  orderResultLog     Json?
  hyperliquidOrderId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model OddsCache {
  id            String   @id @default(cuid())
  tournamentKey String
  bookmakers    String?
  data          Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([tournamentKey, bookmakers])
  @@index([tournamentKey, bookmakers])
}

model TimelineEntry {
  id           String     @id @default(cuid())
  leagueId     String
  teamId       String
  tournamentId String
  timestamp    DateTime
  totalScore   Int
  roundNumber  Int?
  league       League     @relation(fields: [leagueId], references: [id])
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@index([leagueId, tournamentId, timestamp])
  @@index([teamId, tournamentId, timestamp])
}

model TournamentPlayer {
  id                  String     @id @default(cuid())
  tournamentId        String
  playerId            String
  leaderboardPosition String?
  r1                  Json?
  r2                  Json?
  r3                  Json?
  r4                  Json?
  cut                 Int?
  bonus               Int?
  total               Int?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  leaderboardTotal    String?
  player              Player     @relation(fields: [playerId], references: [id])
  tournament          Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, playerId])
  @@index([tournamentId])
  @@index([playerId])
}

model TeamPlayer {
  id        String   @id
  teamId    String
  playerId  String
  addedAt   DateTime @default(now())
  updatedAt DateTime
  active    Boolean  @default(true)
  Player    Player   @relation(fields: [playerId], references: [id])
  Team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, playerId])
  @@index([playerId])
  @@index([teamId])
}
