generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  name              String
  emailVerified     Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  team              Team?             @relation(fields: [teamId], references: [id])
  teamId            String?
  ownedLeagues      League[]          @relation("LeagueCommissioner")
  leagueMemberships LeagueMembership[]
  orderLogs         UserOrderLog[]
}

model Team {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  league    League       @relation(fields: [leagueId], references: [id])
  leagueId  String
  users     User[]
  players   TeamPlayer[]
}

model League {
  id            String             @id @default(cuid())
  name          String
  description   String?
  isPrivate     Boolean           @default(false)
  maxTeams      Int               @default(8)
  commissioner  User              @relation("LeagueCommissioner", fields: [commissionerId], references: [id])
  commissionerId String
  members       LeagueMembership[]
  teams         Team[]
  settings      LeagueSettings?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model LeagueSettings {
  id              String    @id @default(cuid())
  league          League    @relation(fields: [leagueId], references: [id])
  leagueId        String    @unique
  rosterSize      Int       @default(8)
  weeklyStarters  Int       @default(4)
  scoringType     String    @default("STABLEFORD")
  draftDate       DateTime?
  seasonStart     DateTime?
  seasonEnd       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model LeagueMembership {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  role      String   @default("MEMBER")
  joinedAt  DateTime @default(now())

  @@unique([userId, leagueId])
}

model Player {
  id          String             @id @default(cuid())
  pgaTourId   String?            @unique
  name        String
  imageUrl    String?
  hometown    String?
  age         Int?
  teams       TeamPlayer[]
  tournaments TournamentPlayer[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model TeamPlayer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  addedAt   DateTime @default(now())
  active    Boolean  @default(true)

  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
}

model Tournament {
  id                String             @id @default(cuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  course            String
  city              String
  state             String
  timezone          String
  purse             Float?
  status            String             // UPCOMING, IN_PROGRESS, COMPLETED
  roundStatusDisplay String?
  roundDisplay      String?
  currentRound      Int?
  weather           Json?              // Store weather data as JSON
  beautyImage       String?
  players           TournamentPlayer[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model TournamentPlayer {
  id                 String     @id @default(cuid())
  tournament         Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId       String
  player            Player     @relation(fields: [playerId], references: [id])
  playerId          String
  leaderboardPosition Int?
  isActive          Boolean    @default(true)
  r1Score           Int?       // Round scores in Stableford format
  r2Score           Int?
  r3Score           Int?
  r4Score           Int?
  totalScore        Int?
  cut               Boolean    @default(false)
  earnings          Float?
  fedExPoints       Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([tournamentId, playerId])
  @@index([tournamentId])
  @@index([playerId])
}

model UserOrderLog {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  orderType         String    // 'BUY' or 'SELL'
  asset             String
  amount            Float
  price             Float
  status            String    // 'PENDING', 'COMPLETED', 'FAILED'
  orderAttemptLog   Json?     // Raw response from order attempt
  orderResultLog    Json?     // Raw response from order result
  hyperliquidOrderId String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([status])
} 