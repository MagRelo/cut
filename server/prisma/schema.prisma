generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String
  userType          String             @default("USER") // Can be "USER" or "ADMIN"
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ownedLeagues      League[]           @relation("LeagueCommissioner")
  leagueMemberships LeagueMembership[]
  teams             Team[]
  orderLogs         UserOrderLog[]
}


model League {
  id             String             @id @default(cuid())
  name           String
  description    String?
  isPrivate      Boolean            @default(false)
  inviteCode     String?            @unique
  maxTeams       Int                @default(8)
  commissioner   User               @relation("LeagueCommissioner", fields: [commissionerId], references: [id])
  commissionerId String
  members        LeagueMembership[]
  teams          Team[]
  settings       LeagueSettings?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  timelineEntries TimelineEntry[]
}

model LeagueSettings {
  id             String    @id @default(cuid())
  league         League    @relation(fields: [leagueId], references: [id])
  leagueId       String    @unique
  rosterSize     Int       @default(8)
  weeklyStarters Int       @default(4)
  scoringType    String    @default("STABLEFORD")
  draftDate      DateTime?
  seasonStart    DateTime?
  seasonEnd      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model LeagueMembership {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  league   League   @relation(fields: [leagueId], references: [id])
  leagueId String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())

  @@unique([userId, leagueId])
}

model Team {
  id        String       @id @default(cuid())
  name      String
  color     String      @default("#059669")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  league    League       @relation(fields: [leagueId], references: [id])
  leagueId  String
  owner     User         @relation(fields: [userId], references: [id])
  userId    String
  players   TeamPlayer[]
  timelineEntries TimelineEntry[]

  @@unique([userId, leagueId])
}


model TeamPlayer {
  id                  String   @id @default(cuid())
  team                Team     @relation(fields: [teamId], references: [id])
  teamId              String
  player              Player   @relation(fields: [playerId], references: [id])
  playerId            String
  addedAt             DateTime @default(now())
  updatedAt           DateTime @updatedAt
  active              Boolean  @default(true)
  leaderboardPosition String?
  r1                  Json? // { strokes: number }
  r2                  Json? // { strokes: number }
  r3                  Json? // { strokes: number }
  r4                  Json? // { strokes: number }
  cut                 Int?
  bonus               Int?
  total               Int?

  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
}


model Player {
  // Internal ID Management
  id          String   @id @default(cuid())
  sportsRadarId   String  @unique  // SportsRadar's UUID

  // Base Data from SportsRadar API
  first_name    String?
  last_name     String?
  name          String?  // "LastName, FirstName" format
  abbr_name     String?  // e.g. "D.Johnson"
  height        Int?     // in inches
  weight        Int?     // in pounds
  birthday      String?  // ISO date format
  country       String?
  residence     String?
  birth_place   String?
  college       String?
  turned_pro    Int?
  member        Boolean?
  handedness    String?  // "R" or "L"
  
  // Additional PGA Tour Data (Optional)
  pga_pgaTourId     String?  @unique
  pga_imageUrl      String?  
  pga_displayName   String?  
  
  // Status Fields
  isActive    Boolean   @default(false)
  inField     Boolean   @default(false)

  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastSyncedAt DateTime?

  // Relationships (maintaining existing relationships)
  teams       TeamPlayer[]

  @@index([pga_pgaTourId])
  @@index([sportsRadarId])
  @@index([isActive])
  @@index([inField])
}


model Tournament {
  id                 String             @id @default(cuid())
  pgaTourId          String             
  sportsRadarId      String             
  name               String
  startDate          DateTime
  endDate            DateTime
  course             String
  city               String
  state              String
  timezone           String
  venue              Json?
  purse              Float?
  status             String 
  roundStatusDisplay String?
  roundDisplay       String?
  currentRound       Int?
  weather            Json? // Store weather data as JSON
  beautyImage        String?
  cutLine            String?
  cutRound           String?
  manualActive       Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  timelineEntries    TimelineEntry[]
}

model SystemProcessRecord {
  id          String   @id @default(cuid())
  processType String   // Type of process (e.g., "SCORE_UPDATE")
  status      String   // SUCCESS or FAILURE
  processData Json     // Process-specific data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([processType])
  @@index([status])
  @@index([createdAt])
}

model UserOrderLog {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  orderType          String // 'BUY' or 'SELL'
  asset              String
  amount             Float
  price              Float
  status             String // 'PENDING', 'COMPLETED', 'FAILED'
  orderAttemptLog    Json? // Raw response from order attempt
  orderResultLog     Json? // Raw response from order result
  hyperliquidOrderId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([status])
}


model OddsCache {
  id            String   @id @default(cuid())
  tournamentKey String
  bookmakers    String? // Stored as comma-separated string
  data          Json // Stored odds data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([tournamentKey, bookmakers])
  @@index([tournamentKey, bookmakers])
}

model TimelineEntry {
  id          String   @id @default(cuid())
  leagueId    String
  teamId      String
  tournamentId String
  timestamp   DateTime
  totalScore  Int
  roundNumber Int?     // Current round when score was recorded

  league      League     @relation(fields: [leagueId], references: [id])
  team        Team       @relation(fields: [teamId], references: [id])
  tournament  Tournament @relation(fields: [tournamentId], references: [id])

  @@index([leagueId, tournamentId, timestamp])
  @@index([teamId, tournamentId, timestamp])
}

